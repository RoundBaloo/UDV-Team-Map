from __future__ import annotations

from datetime import datetime
from typing import Literal, Dict, Any

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from app.models.sync import SyncJob
from app.providers.base_ad_provider import BaseADProvider
from app.services.sync_utils import (
    upsert_org_units,
    upsert_teams,
    upsert_employees_first_pass,
    apply_org_unit_managers,
    apply_team_leads,
    apply_team_org_units,
    apply_employee_managers_and_org_units,
    apply_employee_team_memberships,
    detect_orphaned_entities,
)
from app.utils.logger import logger


async def run_sync(
    session: AsyncSession,
    provider: BaseADProvider,
    trigger: Literal["manual", "scheduled"] = "manual",
) -> Dict[str, Any]:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:
    - —Å–æ–∑–¥–∞—ë—Ç SyncJob
    - –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (JSON/AD –∏ —Ç.–¥.)
    - –∞–ø—Å–µ—Ä—Ç—ã org_unit / team / employee
    - –≤—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥ –¥–ª—è —Å–≤—è–∑–µ–π (–º–µ–Ω–µ–¥–∂–µ—Ä—ã, –ª–∏–¥—ã, —É—á–∞—Å—Ç–∏–µ)
    - —Ñ–∏–∫—Å–∞—Ü–∏—è orphaned
    - —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏ —Å–≤–æ–¥–∫–∞
    """

    logger.info("üîÅ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (trigger=%s)", trigger)
    job = SyncJob(
        trigger=trigger,
        status="running",
        started_at=datetime.utcnow(),
    )
    session.add(job)
    await session.flush()

    try:
        # --- 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ---
        payload = provider.load()
        logger.info(
            "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω: %s org_units, %s teams, %s employees",
            len(payload.get("org_units", [])),
            len(payload.get("teams", [])),
            len(payload.get("employees", [])),
        )

        # --- 2. OrgUnits ---
        ou_stats = await upsert_org_units(session, job.id, payload.get("org_units", []))

        # --- 3. Teams ---
        team_stats = await upsert_teams(session, job.id, payload.get("teams", []))

        # --- 4. Employees (–ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥) ---
        emp_stats_first = await upsert_employees_first_pass(
            session, job.id, payload.get("employees", [])
        )

        # --- 5. –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–≤—è–∑–∏ (–≤—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥) ---
        await session.flush()

        await apply_org_unit_managers(
            session=session,
            job_id=job.id,
            data=payload.get("org_units", []),
        )
        await apply_team_leads(
            session=session,
            job_id=job.id,
            data=payload.get("teams", []),
        )
        await apply_team_org_units(
            session=session,
            job_id=job.id,
            data=payload.get("teams", [])
        )
        await apply_employee_managers_and_org_units(
            session=session,
            job_id=job.id,
            data=payload.get("employees", []),
        )
        await apply_employee_team_memberships(
            session=session,
            job_id=job.id,
            data=payload.get("employees", []),
        )

        # --- 6. Orphaned ---
        # —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å payload, –∞ –Ω–µ —Å SyncRecord(applied)!
        orphaned_stats = await detect_orphaned_entities(
            session,
            job,
            org_units_payload=payload.get("org_units", []),
            teams_payload=payload.get("teams", []),
            employees_payload=payload.get("employees", []),
        )

        # --- 7. –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º SyncJob ---
        job.finished_at = datetime.utcnow()
        job.status = "success"
        job.summary = {
            "org_units": ou_stats,
            "teams": team_stats,
            "employees": emp_stats_first,
            "orphaned": orphaned_stats,
        }

        await session.commit()
        logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return job.summary

    except Exception as e:
        await session.rollback()
        job.status = "error"
        job.finished_at = datetime.utcnow()
        await session.commit()
        logger.exception("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: %s", e)
        return {"error": str(e)}
